import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as i,o as l,c as r,a as n,b as s,d as a,e as p}from"./app-R99eqMMg.js";const o={},c=n("h1",{id:"🔋⚡-ensuring-high-availability-with-two-server-setup-using-keepalived",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#🔋⚡-ensuring-high-availability-with-two-server-setup-using-keepalived"},[n("span",null,"🔋⚡ Ensuring High Availability with Two-Server Setup Using Keepalived")])],-1),d={href:"https://keepalived-v2.readthedocs.io/en/latest/",target:"_blank",rel:"noopener noreferrer"},u={href:"https://www.vagrantup.com/",target:"_blank",rel:"noopener noreferrer"},v=p(`<h2 id="step-1-creating-the-vagrantfile" tabindex="-1"><a class="header-anchor" href="#step-1-creating-the-vagrantfile"><span>Step 1: Creating the Vagrantfile</span></a></h2><p>First, I created a Vagrantfile to define my virtual machines. This file specified the configuration for two Ubuntu 22.04 VMs, each with a unique MAC address and a static IP address in the same subnet.</p><div class="language-ruby line-numbers-mode" data-ext="rb" data-title="rb"><pre class="language-ruby"><code>Vagrant<span class="token punctuation">.</span>configure<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;2&quot;</span></span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token operator">|</span>config<span class="token operator">|</span>
  <span class="token comment"># Array of predefined MAC addresses</span>
  mac_addresses <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;080027000001&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;080027000002&quot;</span></span><span class="token punctuation">]</span>

  <span class="token comment"># Array of static IP addresses for the VMs</span>
  ip_addresses <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;192.168.56.11&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;192.168.56.12&quot;</span></span><span class="token punctuation">]</span>

  mac_addresses<span class="token punctuation">.</span>each_with_index <span class="token keyword">do</span> <span class="token operator">|</span>mac<span class="token punctuation">,</span> index<span class="token operator">|</span>
    config<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>define <span class="token string-literal"><span class="token string">&quot;vm</span><span class="token interpolation"><span class="token delimiter punctuation">#{</span><span class="token content">index <span class="token operator">+</span> <span class="token number">1</span></span><span class="token delimiter punctuation">}</span></span><span class="token string">&quot;</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>vm<span class="token operator">|</span>
      vm<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>box <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;ubuntu/jammy64&quot;</span></span>
      vm<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>network <span class="token string-literal"><span class="token string">&quot;private_network&quot;</span></span><span class="token punctuation">,</span> <span class="token symbol">ip</span><span class="token operator">:</span> ip_addresses<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token symbol">mac</span><span class="token operator">:</span> mac
      vm<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>provider <span class="token string-literal"><span class="token string">&quot;virtualbox&quot;</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>vb<span class="token operator">|</span>
        vb<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;vm</span><span class="token interpolation"><span class="token delimiter punctuation">#{</span><span class="token content">index <span class="token operator">+</span> <span class="token number">1</span></span><span class="token delimiter punctuation">}</span></span><span class="token string">&quot;</span></span>
        vb<span class="token punctuation">.</span>memory <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;512&quot;</span></span>
        vb<span class="token punctuation">.</span>cpus <span class="token operator">=</span> <span class="token number">1</span>
      <span class="token keyword">end</span>

      <span class="token comment"># Provision Keepalived and Nginx</span>
      vm<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>provision <span class="token string-literal"><span class="token string">&quot;shell&quot;</span></span><span class="token punctuation">,</span> <span class="token symbol">inline</span><span class="token operator">:</span> <span class="token string-literal heredoc-string"><span class="token delimiter"><span class="token punctuation">&lt;&lt;-</span><span class="token symbol">SHELL</span></span><span class="token string">
        sudo apt-get update
        sudo apt-get install -y keepalived nginx
        # Example Keepalived configuration
        sudo bash -c &#39;cat &gt; /etc/keepalived/keepalived.conf &lt;&lt;EOF
vrrp_instance VI_1 {
    state </span><span class="token interpolation"><span class="token delimiter punctuation">#{</span><span class="token content">index <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string-literal"><span class="token string">&#39;MASTER&#39;</span></span> <span class="token operator">:</span> <span class="token string-literal"><span class="token string">&#39;BACKUP&#39;</span></span></span><span class="token delimiter punctuation">}</span></span><span class="token string">
    interface enp0s8
    virtual_router_id 51
    priority </span><span class="token interpolation"><span class="token delimiter punctuation">#{</span><span class="token content">index <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">100</span> <span class="token operator">:</span> <span class="token number">90</span></span><span class="token delimiter punctuation">}</span></span><span class="token string">
    advert_int 1
    authentication {
        auth_type PASS
        auth_pass 1234
    }
    virtual_ipaddress {
        192.168.56.10
    }
}
EOF&#39;
        sudo systemctl restart keepalived

        # Configure a simple web page to show role (MASTER or BACKUP)
        sudo bash -c &#39;echo &quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Server Role: </span><span class="token interpolation"><span class="token delimiter punctuation">#{</span><span class="token content">index <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string-literal"><span class="token string">&#39;MASTER&#39;</span></span> <span class="token operator">:</span> <span class="token string-literal"><span class="token string">&#39;BACKUP&#39;</span></span></span><span class="token delimiter punctuation">}</span></span><span class="token string">&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&quot; &gt; /var/www/html/index.html&#39;
        sudo systemctl restart nginx
      </span><span class="token delimiter"><span class="token symbol">SHELL</span></span></span>
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="step-2-spinning-up-the-vms" tabindex="-1"><a class="header-anchor" href="#step-2-spinning-up-the-vms"><span>Step 2: Spinning Up the VMs</span></a></h2><p>With the Vagrantfile ready, I used Vagrant commands to create and start the virtual machines.</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>vagrant up
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>This command created and configured the VMs as specified in the Vagrantfile. Once the VMs were up and running, I could SSH into them to verify the setup.</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>vagrant <span class="token function">ssh</span> vm1
vagrant <span class="token function">ssh</span> vm2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="step-3-configuring-keepalived" tabindex="-1"><a class="header-anchor" href="#step-3-configuring-keepalived"><span>Step 3: Configuring Keepalived</span></a></h2><p>The heart of this setup was the Keepalived configuration. The Vagrantfile already included provisioning scripts to install and configure Keepalived on both VMs. Here’s a recap of the configuration:</p><ul><li><strong>On the MASTER server:</strong></li></ul><div class="language-plaintext line-numbers-mode" data-ext="plaintext" data-title="plaintext"><pre class="language-plaintext"><code>vrrp_instance VI_1 {
    state MASTER
    interface enp0s8
    virtual_router_id 51
    priority 100
    advert_int 1
    authentication {
        auth_type PASS
        auth_pass 1234
    }
    virtual_ipaddress {
        192.168.56.10
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>On the BACKUP server:</strong></li></ul><div class="language-plaintext line-numbers-mode" data-ext="plaintext" data-title="plaintext"><pre class="language-plaintext"><code>vrrp_instance VI_1 {
    state BACKUP
    interface enp0s8
    virtual_router_id 51
    priority 90
    advert_int 1
    authentication {
        auth_type PASS
        auth_pass 1234
    }
    virtual_ipaddress {
        192.168.56.10
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="step-4-testing-the-setup" tabindex="-1"><a class="header-anchor" href="#step-4-testing-the-setup"><span>Step 4: Testing the Setup</span></a></h2><p>With everything configured, it was time to test the setup. I started by verifying that the virtual IP (VIP) was correctly assigned to the <code>MASTER</code> server.</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">ip</span> a show enp0s8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>I then accessed the web server using the VIP to ensure it was reachable.</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">curl</span> http://192.168.56.10
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>If the setup is correct, you should see the page that indicates which server (MASTER or BACKUP) is responding.</p><h2 id="step-5-simulating-failover" tabindex="-1"><a class="header-anchor" href="#step-5-simulating-failover"><span>Step 5: Simulating Failover</span></a></h2><p>To test the failover functionality, I stopped the Keepalived service on the <code>MASTER</code> server.</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl stop keepalived
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>I then checked the <code>BACKUP</code> server to see if it had taken over the VIP.</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">ip</span> a show enp0s8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Sure enough, the <code>BACKUP</code> server had taken over, and the web server was still accessible via the VIP.</p><h2 id="lessons-learned" tabindex="-1"><a class="header-anchor" href="#lessons-learned"><span>Lessons Learned</span></a></h2><p>This experience proved that high availability can be achieved with just two servers using Keepalived. Here are some key takeaways:</p><ol><li><strong>Simplicity and Power</strong>: Keepalived is a powerful tool that is relatively simple to set up and configure.</li><li><strong>High Availability on a Budget</strong>: Even with just two servers, you can achieve a high level of availability.</li><li><strong>Practical Testing</strong>: Always test your setup thoroughly to ensure that failover works as expected.</li></ol><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>When it comes to ensuring high availability with limited resources, Keepalived is a great tool to have in your arsenal. I hope this article has inspired you to explore high availability setups further.</p><p>Feel free to share your own experiences or ask questions in the comments below. Use your resources wisely and keep your systems running smoothly! 🛠️💡💻⚙️</p>`,32);function h(m,g){const e=i("ExternalLinkIcon");return l(),r("div",null,[c,n("p",null,[s("Ensuring high availability with limited resources can be challenging. I recently wanted to prove you can do it using "),n("a",d,[s("Keepalived"),a(e)]),s(" and just two servers 💪✨. To prove it, I used "),n("a",u,[s("Vagrant"),a(e)]),s(". Here's a quick rundown of my journey! 🚀")]),v])}const f=t(o,[["render",h],["__file","high-availability-with-keepalived.html.vue"]]),y=JSON.parse('{"path":"/articles/high-availability-with-keepalived.html","title":"🔋⚡ Ensuring High Availability with Two-Server Setup Using Keepalived","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Step 1: Creating the Vagrantfile","slug":"step-1-creating-the-vagrantfile","link":"#step-1-creating-the-vagrantfile","children":[]},{"level":2,"title":"Step 2: Spinning Up the VMs","slug":"step-2-spinning-up-the-vms","link":"#step-2-spinning-up-the-vms","children":[]},{"level":2,"title":"Step 3: Configuring Keepalived","slug":"step-3-configuring-keepalived","link":"#step-3-configuring-keepalived","children":[]},{"level":2,"title":"Step 4: Testing the Setup","slug":"step-4-testing-the-setup","link":"#step-4-testing-the-setup","children":[]},{"level":2,"title":"Step 5: Simulating Failover","slug":"step-5-simulating-failover","link":"#step-5-simulating-failover","children":[]},{"level":2,"title":"Lessons Learned","slug":"lessons-learned","link":"#lessons-learned","children":[]},{"level":2,"title":"Conclusion","slug":"conclusion","link":"#conclusion","children":[]}],"git":{"createdTime":1732804256000,"updatedTime":1734461718000,"contributors":[{"name":"Dorin Andrei Dragan","email":"dorin.andrei.dragan@gmail.com","commits":1},{"name":"dorinandreidragan","email":"dorinandreidragan@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":2.2,"words":659},"filePathRelative":"articles/high-availability-with-keepalived.md","localizedDate":"November 28, 2024"}');export{f as comp,y as data};
